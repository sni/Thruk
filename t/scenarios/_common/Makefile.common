SHELL=bash
export THRUK_CONFIG=$(shell pwd)
export TEST_AUTHOR=1
THRUK=cd ../../.. && ./script/thruk
STARTUPWAIT=300
ERROR_TAIL=50
EXPECTED_BACKENDS=1
INTERACTIVE:=$(shell [ -t 0 ] && echo 1)
ifdef INTERACTIVE
  DOCKER_COMPOSE_TTY=
  DOCKER_COMPOSE_LOGS=
else
  DOCKER_COMPOSE_TTY=-T
  DOCKER_COMPOSE_LOGS=--no-color
endif

wait_start:
	$(THRUK) cache clean
	for x in $$(seq $(STARTUPWAIT)); do \
	   if [ $$(docker-compose logs | grep "failed=" | grep -v "failed=0" | wc -l) -gt 0 ]; then $(MAKE) wait_start_failed; exit 1; fi; \
	   if [ $$(docker-compose logs | grep "| ERROR" | wc -l) -gt 0 ]; then $(MAKE) wait_start_failed; exit 1; fi; \
	   if [ $$($(THRUK) -l 2>&1 | grep -v ^Def | grep -v ^- | grep -v ERROR | grep OK | wc -l) -eq $(EXPECTED_BACKENDS) ]; then break; else sleep 1; fi; \
	   if [ $$x -eq $(STARTUPWAIT) ]; then $(MAKE) wait_start_failed; exit 1; fi; \
	done
	$(THRUK) -l
	$(MAKE) extra_wait_start

wait_start_failed: non_interactive_only
	@echo "### $@: $$(date "+%FT%T.%N")"
	-echo "ERROR: startup failed"
	-test -e thruk.conf && $(THRUK) -vvv -l
	-docker ps
	-docker-compose logs --tail=30 $(DOCKER_COMPOSE_LOGS) -t | sort
	$(MAKE) wait_start_failed_extra

wait_start_failed_extra:

test: wait_start
	@echo "### $@: $$(date "+%FT%T.%N")"
	cd ../../.. && PERL_DL_NONLAZY=1 /usr/bin/env perl "-MExtUtils::Command::MM" "-e" "test_harness(0)" $(shell pwd)/t/*.t \
		|| ( cd $(shell pwd) && $(MAKE) failed_test )
	@echo "### $@: $$(date "+%FT%T.%N")"
	$(MAKE) extra_test \
		|| ( cd $(shell pwd) && $(MAKE) failed_test )
	@echo "### $@: $$(date "+%FT%T.%N")"
	$(MAKE) test_docker_logs

test_verbose: wait_start
	@echo "### $@: $$(date "+%FT%T.%N")"
	cd ../../.. && PERL_DL_NONLAZY=1 /usr/bin/env perl "-MExtUtils::Command::MM" "-e" "test_harness(1)" $(shell pwd)/t/*.t \
		|| ( cd $(shell pwd) && $(MAKE) failed_test )
	@echo "### $@: $$(date "+%FT%T.%N")"
	$(MAKE) extra_test_verbose \
		|| ( cd $(shell pwd) && $(MAKE) failed_test )
	@echo "### $@: $$(date "+%FT%T.%N")"
	$(MAKE) test_docker_logs_verbose

test_docker_logs:
	cd ../../.. && PERL_DL_NONLAZY=1 /usr/bin/env perl "-MExtUtils::Command::MM" "-e" "test_harness(0)" $(shell pwd)/../_common/t/999*.t \
		|| ( cd $(shell pwd) && $(MAKE) failed_test )

test_docker_logs_verbose:
	cd ../../.. && PERL_DL_NONLAZY=1 /usr/bin/env perl "-MExtUtils::Command::MM" "-e" "test_harness(1)" $(shell pwd)/../_common/t/999*.t \
		|| ( cd $(shell pwd) && $(MAKE) failed_test )

failed_test: non_interactive_only
	@echo "### $@: $$(date "+%FT%T.%N")"
	-echo "ERROR: test failed"
	-docker ps
	-docker-compose logs --tail=30 $(DOCKER_COMPOSE_LOGS) -t | sort
	for svc in $$(docker-compose config --services | sort); do \
		index=0; \
		for container in $$(docker-compose ps -q $$svc); do \
			index=$$(( index + 1 )); \
			echo "*** $${svc}_$${index}"; \
			if docker exec -t --user root $$container test -d /opt/omd/sites/demo; then \
				echo "***"; \
				echo "*** $${svc}_$${index} - apache/error_log"; \
				echo "***"; \
				docker exec -t --user root $$container tail -$(ERROR_TAIL) /opt/omd/sites/demo/var/log/apache/error_log; \
				echo "***"; \
				echo "*** $${svc}_$${index} - thruk.log"; \
				echo "***"; \
				docker exec -t --user root $$container tail -$(ERROR_TAIL) /opt/omd/sites/demo/var/log/thruk.log; \
				echo "***"; \
				echo "*** $${svc}_$${index} - naemon.log"; \
				echo "***"; \
				docker exec -t --user root $$container tail -$(ERROR_TAIL) /opt/omd/sites/demo/var/log/naemon.log; \
			fi; \
		done; \
	done
	-$(MAKE) extra_failed_test
	exit 1

extra_failed_test:
	exit 1

ifdef INTERACTIVE
non_interactive_only:
	exit 1
else
non_interactive_only:
	:
endif

server:
	test -f thruk_local.conf || exit 1
	cd ../../.. && THRUK_PERFORMANCE_DEBUG=1 ./script/thruk_server.pl -r

web:
	@python3 -m webbrowser ${PLACK_TEST_EXTERNALSERVER_URI}thruk/

prepare:
	@echo "### $@: $$(date "+%FT%T.%N")"
	docker-compose build
	docker-compose up --remove-orphans -d
	docker ps
	@docker-compose logs -t $(DOCKER_COMPOSE_LOGS) -f | while read LOGLINE; do \
		echo "$${LOGLINE}"; \
		[[ "$${LOGLINE}" == *"Starting Apache web server"* ]] && pkill -P $$$$ docker-compose && exit 0; \
		[[ "$${LOGLINE}" == *"ERROR"* ]] && pkill -P $$$$ docker-compose && exit 1; \
		[[ "$${LOGLINE}" == *"exited with code"* ]] && pkill -P $$$$ docker-compose && exit 1; \
	done
	@echo "### $@: $$(date "+%FT%T.%N")"
	$(MAKE) extra_prepare
	@echo "### $@: $$(date "+%FT%T.%N")"

clean:
	@echo "### $@: $$(date "+%FT%T.%N")"
	docker-compose kill -s INT
	docker-compose kill
	docker-compose rm -f
	-test -e thruk.conf && $(THRUK) cache clean all
	@echo "### $@: $$(date "+%FT%T.%N")"
	$(MAKE) extra_clean
	@echo "### $@: $$(date "+%FT%T.%N")"

clean_docker_killall:
	-docker network prune -f
	-[ $$(docker ps -q | wc -l) -eq 0 ] || docker kill $$(docker ps -q)

update:
	@echo "### $@: $$(date "+%FT%T.%N")"
	docker-compose pull
	for IMG in $$(grep FROM */Dockerfile | awk '{ print $$2 }' | sort -u); do docker pull $$IMG; done
	@echo "### $@: $$(date "+%FT%T.%N")"

extra_wait_start:

extra_clean:

extra_prepare:

extra_test:

extra_test_verbose:
